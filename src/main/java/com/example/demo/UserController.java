package com.example.demo;

import org.hibernate.annotations.NotFound;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@CrossOrigin(origins = "http://localhost:4200", methods = { RequestMethod.GET, RequestMethod.POST, RequestMethod.PATCH, RequestMethod.DELETE, RequestMethod.PUT })
@Controller // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping // Map ONLY POST Requests
    @ResponseBody
    public User Create (@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        userRepository.save(user);
        return user;
    }

    @PatchMapping("/{id}") // Map ONLY POST Requests
    @ResponseBody
    public ResponseEntity<User> Update (@RequestBody User user, @PathVariable int id) {
        Optional<User> userToUpdate = userRepository.findById(id);
        if (userToUpdate.isEmpty()) return ResponseEntity.notFound().build();
        userToUpdate.get().setName(user.getName());
        userToUpdate.get().setEmail(user.getEmail());
        userRepository.save(user);
        return ResponseEntity.ok(user);
    }

    @PutMapping("/{id}") // Map ONLY POST Requests
    @ResponseBody
    public ResponseEntity<User> Replace (@RequestBody User user, @PathVariable int id) {
        Optional<User> userToUpdate = userRepository.findById(id);
        if (userToUpdate.isEmpty()) return ResponseEntity.notFound().build();
        userToUpdate.get().setName(user.getName());
        userToUpdate.get().setEmail(user.getEmail());
        userRepository.save(user);
        return ResponseEntity.ok(user);
    }

    @GetMapping("/{id}") // Map ONLY POST Requests
    @ResponseBody
    public ResponseEntity<User> Find (@PathVariable int id) {
        Optional<User> user = userRepository.findById(id);
        if (user.isEmpty()) return ResponseEntity.notFound().build();
        return ResponseEntity.ok(user.get());
    }

    @DeleteMapping("/{id}") // Map ONLY POST Requests
    @ResponseBody
    public ResponseEntity<User> Delete (@PathVariable int id) {
        Optional<User> user = userRepository.findById(id);
        if (user.isEmpty()) return ResponseEntity.notFound().build();
        userRepository.delete(user.get());
        return ResponseEntity.ok(user.get());
    }

    @GetMapping
    @ResponseBody
    public Iterable<User> Index() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}